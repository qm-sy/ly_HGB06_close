C51 COMPILER V9.60.7.0   MODBUS                                                            11/08/2024 16:16:15 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MODBUS
OBJECT MODULE PLACED IN .\output\modbus.obj
COMPILER INVOKED BY: D:\APP\Keil_v5\C51\BIN\C51.EXE modbus.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\..\INC;..\温控程序
                    --三路温控-modebus;..\温控程序-四路闭环温控-modebus) DEBUG OBJECTEXTEND OBJECT(.\output\modbus.obj)

line level    source

   1          #include "modbus.h"
   2          #include  "STC15W4Kxx.H"
   3          #include "crc.h"
   4          
   5          #define FUNCTION_READ_COILS_1                 1     
   6          #define FUNCTION_READ_DISCREATE_INPUT_2       2     
   7          #define FUNCTION_READ_HOLDING_REGISTERS_3     3     
   8          #define FUNCTION_READ_INPUT_REGISTERS_4       4     
   9          #define FUNCTION_WRITE_SINGLE_COIL_5          5     
  10          #define FUNCTION_WRITE_SINGLE_REGISTER_6      6     
  11          #define FUNCTION_WRITE_MULTIPLE_COILS_F       0xf   
  12          #define FUNCTION_WRITE_MULTIPLE_REGISTERS_10  0x10  
  13          #define FUNCTION_READ_WRITE_MULTIPLE_REGISTERS_17  0x17  
  14          
  15          
  16          #define uchar  unsigned char
  17          #define uint   unsigned int
  18          #define ulong  unsigned long
  19          
  20          extern  uchar   xdata  tm_set1;
  21          extern  uchar   xdata  tm_set2;
  22          extern  uchar   xdata  tm_set3;
  23          extern  uchar   xdata  tm_set4;
  24          
  25          extern int   idata  temp_set1;
  26          extern int   idata  temp_set2;
  27          extern int   idata  temp_set3;
  28          extern int   idata  temp_set4;
  29          
  30          extern int     idata  temp1;
  31          extern int     idata  temp2;
  32          extern int     idata  temp3;
  33          extern int     idata  temp4;
  34          
  35          extern  uchar idata  fan_num;
  36          extern  uchar idata  tb_num;
  37          extern  uchar idata  hot_num;
  38          extern  uchar idata  mode_num;
  39          extern  uchar   hot_power;
  40          extern  uchar   fan_power;
  41          extern  uchar  idata hot_in_data;
  42          
  43          
  44          extern bit hot_power_bit;
  45          extern bit mode_num_bit;
  46          
  47          unsigned char idata dev_address = 1;                        
  48          unsigned char idata dev_broadcast_address = 0;  
  49          
  50          void send_buffer(unsigned char *buf,int len);
  51          void  save_mode_wr(void);
  52          
  53          unsigned char xdata send_modbus_buffer[256];
  54          int xdata send_modbus_buf_count = 0;
C51 COMPILER V9.60.7.0   MODBUS                                                            11/08/2024 16:16:15 PAGE 2   

  55          unsigned char xdata localbuf[256];
  56          char xdata msg[64];
  57          
  58          
  59          
  60          
  61          void send_bad_msg(unsigned char address,unsigned char function,unsigned char errorCode)
  62          {
  63   1              unsigned char return_msg[5];
  64   1              unsigned short crc = 0;
  65   1              
  66   1              return_msg[0] = address;
  67   1              return_msg[1] = 0x80 + function;
  68   1              return_msg[2] = errorCode;
  69   1              crc = crc16(return_msg,3);
  70   1              return_msg[3] = crc;
  71   1              return_msg[4] = crc >> 8;
  72   1              send_buffer(return_msg,5);  
  73   1      }
  74          
  75          int broadcast_process(unsigned char *buf,int len)
  76          {        
  77   1              buf = buf;
  78   1              len = len;
  79   1              
  80   1              return 1;
  81   1      }
  82          
  83           
  84          
  85            
  86          
  87          
  88          int function_READ_COILS_1(unsigned char *buf) 
  89          {
  90   1              int ret = 0;
  91   1              unsigned char out_count = 0;       
  92   1              unsigned short start_address = 0;  
  93   1              unsigned short count = 0;          
  94   1              unsigned short crc  = 0;
  95   1              int send_total_count = 0;
  96   1              
  97   1              
  98   1              
  99   1              start_address  = buf[2] << 8;
 100   1              start_address += buf[3];
 101   1              count  = buf[4] << 8;
 102   1              count += buf[5];
 103   1              //sprintf(msg,"addr=%u,count=%u\r\n\0",start_address,count);
 104   1              //debug_out(msg);
 105   1              
 106   1              //数量是否有效，如果无效 则发送异常码 3
 107   1              if (count < 1 || count > 0x07D0) {
 108   2                      send_bad_msg(buf[0],buf[1],3);   
 109   2                      ret = 1;
 110   2          return ret;         
 111   2              }
 112   1              
 113   1              
 114   1              
 115   1              
 116   1              out_count = count / 8;
C51 COMPILER V9.60.7.0   MODBUS                                                            11/08/2024 16:16:15 PAGE 3   

 117   1              if (count % 8 > 0) out_count++;
 118   1              send_modbus_buf_count = 0;
 119   1              send_modbus_buffer[0] = buf[0];   
 120   1              send_modbus_buffer[1] = buf[1];   
 121   1              send_modbus_buffer[2] = out_count; 
 122   1              while (out_count--) {
 123   2                send_modbus_buffer[3+send_modbus_buf_count] = P5; 
 124   2                      send_modbus_buf_count++;
 125   2        }             
 126   1              send_modbus_buffer[2] = send_modbus_buf_count;   
 127   1              send_total_count = send_modbus_buf_count + 5;    
 128   1              crc = crc16(send_modbus_buffer,send_total_count-2);  
 129   1              send_modbus_buffer[send_total_count-2] = crc; 
 130   1              send_modbus_buffer[send_total_count-1] = crc >> 8;
 131   1              send_buffer(send_modbus_buffer,send_total_count);  
 132   1              
 133   1              //debug_out("function_READ_COILS_1\r\n\0");
 134   1              return ret;
 135   1      }
 136          
 137          
 138          int function_READ_DISCREATE_INPUT_2(unsigned char *buf)
 139          {
 140   1        int ret = 0;
 141   1              unsigned char out_count = 0;       
 142   1              unsigned short start_address = 0;  
 143   1              unsigned short count = 0;          
 144   1              unsigned short crc  = 0;
 145   1              int send_total_count = 0;
 146   1              
 147   1              
 148   1              start_address  = buf[2] << 8;
 149   1              start_address += buf[3];
 150   1              count  = buf[4] << 8;
 151   1              count += buf[5];
 152   1              //sprintf(msg,"addr=%u,count=%u\r\n\0",start_address,count);
 153   1              //debug_out(msg);
 154   1              
 155   1              //数量是否有效，如果无效 则发送异常码 3
 156   1              if (count < 1 || count > 0x07D0) {
 157   2                      send_bad_msg(buf[0],buf[1],3);   //发送 异常码 3 
 158   2                      ret = 1;
 159   2          return ret;         
 160   2              }
 161   1              
 162   1      
 163   1              out_count = count / 8;
 164   1              if (count % 8 > 0) out_count++;
 165   1              send_modbus_buf_count = 0;
 166   1              send_modbus_buffer[0] = buf[0];   
 167   1              send_modbus_buffer[1] = buf[1];   
 168   1              send_modbus_buffer[2] = out_count;  
 169   1              while (out_count--) {
 170   2                send_modbus_buffer[3+send_modbus_buf_count] = P5; 
 171   2                      send_modbus_buf_count++;
 172   2        }             
 173   1              send_modbus_buffer[2] = send_modbus_buf_count;   
 174   1              send_total_count = send_modbus_buf_count + 5;    
 175   1              crc = crc16(send_modbus_buffer,send_total_count-2);  
 176   1              send_modbus_buffer[send_total_count-2] = crc; 
 177   1              send_modbus_buffer[send_total_count-1] = crc >> 8;
 178   1              send_buffer(send_modbus_buffer,send_total_count);  
C51 COMPILER V9.60.7.0   MODBUS                                                            11/08/2024 16:16:15 PAGE 4   

 179   1              
 180   1              //debug_out("function_READ_DISCREATE_INPUT_2\r\n\0");
 181   1              return ret;
 182   1      }
 183          
 184          
 185          int function_READ_HOLDING_REGISTERS_3(unsigned char *buf)
 186          {
 187   1        int ret = 0;
 188   1              unsigned char out_count = 0;       
 189   1              unsigned short start_address = 0;  
 190   1              unsigned short count = 0;          
 191   1              unsigned short crc  = 0;
 192   1              int send_total_count = 0;
 193   1              
 194   1              //输入的起始地址和输出的数量
 195   1              start_address  = buf[2] << 8;
 196   1              start_address += buf[3];
 197   1              count  = buf[4] << 8;
 198   1              count += buf[5];
 199   1              count-=4;
 200   1              //sprintf(msg,"addr=0x%x,count=%x\r\n\0",start_address,count);
 201   1              //debug_out(msg);
 202   1              //sprintf(msg,"addr=%u,count=%u\r\n\0",start_address,count);
 203   1              //debug_out(msg);
 204   1              
 205   1              //数量是否有效，如果无效 则发送异常码 3
 206   1              if (count < 1 || count > 0x07D) {
 207   2                      send_bad_msg(buf[0],buf[1],3);   
 208   2                      ret = 1;
 209   2          return ret;         
 210   2              }
 211   1              
 212   1              
 213   1              
 214   1              
 215   1              out_count = count / 8;
 216   1              if (count % 8 > 0) out_count++;
 217   1              send_modbus_buf_count = 0;
 218   1              send_modbus_buffer[0] = buf[0];   
 219   1              send_modbus_buffer[1] = buf[1];   
 220   1              send_modbus_buffer[2] = out_count;  
 221   1          if(start_address==40001)
 222   1               {
 223   2                while (count--) {
 224   3                //send_modbus_buffer[3+send_modbus_buf_count] =hot_in_data; send_modbus_buf_count++;  
 225   3                //send_modbus_buffer[3+send_modbus_buf_count] =fan_num; send_modbus_buf_count++; 
 226   3                send_modbus_buffer[3+send_modbus_buf_count] =mode_num; send_modbus_buf_count++; 
 227   3                send_modbus_buffer[3+send_modbus_buf_count] =hot_power; send_modbus_buf_count++; 
 228   3      
 229   3                send_modbus_buffer[3+send_modbus_buf_count] =temp1; send_modbus_buf_count++; 
 230   3                send_modbus_buffer[3+send_modbus_buf_count] =temp2; send_modbus_buf_count++; 
 231   3                send_modbus_buffer[3+send_modbus_buf_count] =temp3; send_modbus_buf_count++; 
 232   3                send_modbus_buffer[3+send_modbus_buf_count] =temp4; send_modbus_buf_count++; 
 233   3      
 234   3                send_modbus_buffer[3+send_modbus_buf_count] =tm_set1; send_modbus_buf_count++; 
 235   3                send_modbus_buffer[3+send_modbus_buf_count] =tm_set2; send_modbus_buf_count++; 
 236   3                send_modbus_buffer[3+send_modbus_buf_count] =tm_set3; send_modbus_buf_count++; 
 237   3                send_modbus_buffer[3+send_modbus_buf_count] =tm_set4; send_modbus_buf_count++; 
 238   3                } 
 239   2                send_modbus_buffer[2] = send_modbus_buf_count;        
 240   2                send_total_count = send_modbus_buf_count + 5;   
C51 COMPILER V9.60.7.0   MODBUS                                                            11/08/2024 16:16:15 PAGE 5   

 241   2                crc = crc16(send_modbus_buffer,send_total_count-2);  
 242   2                send_modbus_buffer[send_total_count-2] = crc; 
 243   2                send_modbus_buffer[send_total_count-1] = crc >> 8;
 244   2                send_buffer(send_modbus_buffer,send_total_count);  
 245   2                ret = 2;
 246   2               }
 247   1      
 248   1              else { send_bad_msg(buf[0],buf[1],2); ret = 1;}  
 249   1              return ret;
 250   1      }
 251          
 252          
 253          int function_READ_INPUT_REGISTERS_4(unsigned char *buf)
 254          {
 255   1              int ret = 0;
 256   1              unsigned char out_count = 0;       
 257   1              unsigned short start_address = 0;  
 258   1              unsigned short count = 0;          
 259   1              unsigned short crc  = 0;
 260   1              int send_total_count = 0;
 261   1              
 262   1              
 263   1              start_address  = buf[2] << 8;
 264   1              start_address += buf[3];
 265   1              count  = buf[4] << 8;
 266   1              count += buf[5];
 267   1              count-=4;
 268   1              //sprintf(msg,"addr=0x%x,count=%x\r\n\0",start_address,count);
 269   1              //debug_out(msg);
 270   1              //sprintf(msg,"addr=%u,count=%u\r\n\0",start_address,count);
 271   1              //debug_out(msg);
 272   1              
 273   1              //数量是否有效，如果无效 则发送异常码 3
 274   1              if (count < 1 || count > 0x07D) {
 275   2                      send_bad_msg(buf[0],buf[1],3);   //发送 异常码 3 
 276   2                      ret = 1;
 277   2          return ret;         
 278   2              }
 279   1              
 280   1              //地址是否ok,地址+输出数量是否ok,否则发送 异常码 2
 281   1              
 282   1              //读取输入寄存器是否ok,否则发送 异常码 4
 283   1              
 284   1              send_modbus_buf_count = 0;
 285   1              send_modbus_buffer[0] = buf[0];   
 286   1              send_modbus_buffer[1] = buf[1];  
 287   1              send_modbus_buffer[2] = out_count;  
 288   1              if(start_address==40001)
 289   1               {                                                                                                                      
 290   2                while (count--) {
 291   3                //send_modbus_buffer[3+send_modbus_buf_count] =hot_in_data; send_modbus_buf_count++;  
 292   3                //send_modbus_buffer[3+send_modbus_buf_count] =fan_num; send_modbus_buf_count++; 
 293   3                send_modbus_buffer[3+send_modbus_buf_count] =mode_num; send_modbus_buf_count++; 
 294   3                send_modbus_buffer[3+send_modbus_buf_count] =hot_power; send_modbus_buf_count++; 
 295   3                
 296   3      
 297   3                send_modbus_buffer[3+send_modbus_buf_count] =temp1; send_modbus_buf_count++; 
 298   3                send_modbus_buffer[3+send_modbus_buf_count] =temp2; send_modbus_buf_count++; 
 299   3                send_modbus_buffer[3+send_modbus_buf_count] =temp3; send_modbus_buf_count++; 
 300   3                send_modbus_buffer[3+send_modbus_buf_count] =temp4; send_modbus_buf_count++; 
 301   3      
 302   3                send_modbus_buffer[3+send_modbus_buf_count] =tm_set1; send_modbus_buf_count++; 
C51 COMPILER V9.60.7.0   MODBUS                                                            11/08/2024 16:16:15 PAGE 6   

 303   3                send_modbus_buffer[3+send_modbus_buf_count] =tm_set2; send_modbus_buf_count++; 
 304   3                send_modbus_buffer[3+send_modbus_buf_count] =tm_set3; send_modbus_buf_count++; 
 305   3                send_modbus_buffer[3+send_modbus_buf_count] =tm_set4; send_modbus_buf_count++; 
 306   3                } 
 307   2                send_modbus_buffer[2] = send_modbus_buf_count;        
 308   2                send_total_count = send_modbus_buf_count + 5;   
 309   2                crc = crc16(send_modbus_buffer,send_total_count-2);  
 310   2                send_modbus_buffer[send_total_count-2] = crc; 
 311   2                send_modbus_buffer[send_total_count-1] = crc >> 8;
 312   2                send_buffer(send_modbus_buffer,send_total_count);  
 313   2                ret = 2;
 314   2               } 
 315   1              
 316   1      
 317   1              else { send_bad_msg(buf[0],buf[1],2); ret = 1;}  
 318   1              return ret;
 319   1      }
 320          
 321          
 322          int function_WRITE_SINGLE_COIL_5(unsigned char *buf,int len)
 323          {
 324   1              int ret = 0;
 325   1              unsigned short start_address = 0;  
 326   1              unsigned short value = 0;          
 327   1              
 328   1              
 329   1              start_address  = buf[2] << 8;
 330   1              start_address += buf[3];
 331   1              value  = buf[4] << 8;
 332   1              value += buf[5];
 333   1              //sprintf(msg,"addr=0x%x,value=%x\r\n\0",start_address,value);
 334   1              //debug_out(msg);
 335   1              //sprintf(msg,"addr=%u,value=%u\r\n\0",start_address,value);
 336   1              //debug_out(msg);
 337   1              
 338   1              //数量是否有效，如果无效 则发送异常码 3
 339   1              if (value != 0x0 && value != 0xFF00) {
 340   2                      send_bad_msg(buf[0],buf[1],3);   //发送 异常码 3 
 341   2                      ret = 1;
 342   2          return ret;         
 343   2              }
 344   1            //这里可以添加执行的数据或命令
 345   1      
 346   1              //if((start_address==40001)&&(value==0))            P27=0;
 347   1              //if((start_address==40001)&&(value==0xff00))   P27=1;
 348   1      
 349   1              
 350   1              //地址是否ok, 否则发送 异常码 2
 351   1              
 352   1              //写线圈是否ok,否则发送 异常码 4
 353   1              
 354   1              
 355   1                      send_buffer(buf,len);             
 356   1                      
 357   1              
 358   1              
 359   1              return ret;
 360   1      }
 361          
 362          
 363          int function_WRITE_SINGLE_REGISTER_6(unsigned char *buf,int len)
 364          {
C51 COMPILER V9.60.7.0   MODBUS                                                            11/08/2024 16:16:15 PAGE 7   

 365   1        int ret = 0;
 366   1              unsigned short start_address = 0;  
 367   1              unsigned short value = 0;          
 368   1              
 369   1              
 370   1              
 371   1              start_address  = buf[2] << 8;
 372   1              start_address += buf[3];
 373   1              value  = buf[4] << 8;
 374   1              value += buf[5];
 375   1              
 376   1              
 377   1              
 378   1              if (value < 0x0 || value > 0xFFFF) {
 379   2                      send_bad_msg(buf[0],buf[1],3);    
 380   2                      ret = 1;
 381   2          return ret;         
 382   2              }
 383   1              if(start_address==42005)         
 384   1                {
 385   2                 if((buf[5]>0)&&(buf[5]<5)) {
 386   3                   mode_num=buf[5];
 387   3                       mode_num_bit=1;
 388   3                   send_buffer(buf,len);            
 389   3                       ret = 2;
 390   3                      }
 391   2                }  
 392   1      
 393   1              else if(start_address==42009)  
 394   1                 {
 395   2                      
 396   2                   hot_power=buf[5];
 397   2                       hot_power_bit=1;
 398   2                   send_buffer(buf,len);            
 399   2      
 400   2                       ret = 2;
 401   2                 }
 402   1      
 403   1               
 404   1                    
 405   1               else { send_bad_msg(buf[0],buf[1],2); ret = 1;}  
 406   1              
 407   1              
 408   1              return ret;
 409   1      }
 410          
 411          
 412          
 413          
 414          
 415          
 416          
 417          
 418          
 419          
 420          int function_WRITE_MULTIPLE_COILS_F(unsigned char *buf)
 421          {
 422   1        int ret = 0;
 423   1              unsigned short crc = 0;
 424   1              unsigned short start_address = 0;  
 425   1              unsigned short count = 0;          
 426   1              unsigned char localbufLength = 0;
C51 COMPILER V9.60.7.0   MODBUS                                                            11/08/2024 16:16:15 PAGE 8   

 427   1              unsigned char index = 0;
 428   1              
 429   1              
 430   1              
 431   1              start_address  = buf[2] << 8;
 432   1              start_address += buf[3];
 433   1              count  = buf[4] << 8;
 434   1              count += buf[5];
 435   1              //sprintf(msg,"addr=0x%x,count=%x\r\n\0",start_address,count);
 436   1              //debug_out(msg);
 437   1              //sprintf(msg,"addr=%u,count=%u\r\n\0",start_address,count);
 438   1              //debug_out(msg);
 439   1              
 440   1              //数量是否有效，如果无效 则发送异常码 3
 441   1              if (count < 0x1 || count > 0x7B0) {
 442   2                      send_bad_msg(buf[0],buf[1],3);    
 443   2                      ret = 1;
 444   2          return ret;         
 445   2              }
 446   1              
 447   1              
 448   1              
 449   1              localbufLength = buf[6];
 450   1              for (index = 0; index < localbufLength; index++) {
 451   2          localbuf[index] = buf[7+index];             
 452   2              }
 453   1              
 454   1      
 455   1                      crc = crc16(buf,6);
 456   1                      buf[6] = crc;
 457   1                      buf[7] = crc >> 8;
 458   1                      send_buffer(buf,8);              
 459   1              
 460   1              
 461   1              
 462   1              return ret;
 463   1      }
 464          
 465          
 466          
 467          
 468          
 469          
 470          
 471          //写多个寄存器,功能码 0x10
 472          int function_WRITE_MULTIPLE_REGISTERS_10(unsigned char *buf)
 473          {
 474   1        int ret = 0;
 475   1              unsigned short crc = 0;
 476   1              unsigned short start_address = 0;  //起始地址
 477   1              unsigned short count = 0;          //输出量     
 478   1              unsigned char localbufLength = 0;
 479   1              unsigned char index = 0;
 480   1              
 481   1              
 482   1      
 483   1              start_address  = buf[2] << 8;
 484   1              start_address += buf[3];
 485   1              count  = buf[4] << 8;
 486   1              count += buf[5];
 487   1              
 488   1      
C51 COMPILER V9.60.7.0   MODBUS                                                            11/08/2024 16:16:15 PAGE 9   

 489   1              
 490   1              
 491   1              if (count < 0x1 || count > 0x7B) {
 492   2                      send_bad_msg(buf[0],buf[1],3);   
 493   2                      ret = 1;
 494   2          return ret;         
 495   2              }
 496   1      
 497   1           
 498   1          if(start_address!=41000) {send_bad_msg(buf[0],buf[1],2);   
 499   2                 ret = 1;
 500   2             return ret;
 501   2                }
 502   1              
 503   1              
 504   1              
 505   1                 tm_set1=buf[7];
 506   1                 tm_set2=buf[8];
 507   1                 tm_set3=buf[9];
 508   1                 tm_set4=buf[10];
 509   1      
 510   1                  crc = crc16(buf,6);
 511   1                      buf[6] = crc;
 512   1                      buf[7] = crc >> 8;
 513   1                      send_buffer(buf,8);           
 514   1      
 515   1                 temp_set1=(int)tm_set1;
 516   1             temp_set2=(int)tm_set2;
 517   1             temp_set3=(int)tm_set3;
 518   1                 temp_set4=(int)tm_set4;
 519   1                 save_mode_wr(); 
 520   1                       
 521   1                      ret = 2;  
 522   1              
 523   1              return ret;
 524   1      }
 525          
 526          
 527          
 528          
 529          
 530          
 531          
 532          int function_READ_WRITE_MULTIPLE_REGISTERS_17(unsigned char *buf)
 533          {
 534   1        int ret = 1;
 535   1              unsigned short crc = 0;
 536   1              unsigned short read_start_address = 0;  
 537   1              unsigned short write_start_address = 0;  
 538   1              unsigned short readCount = 0;         
 539   1              unsigned char writebytes = 0;
 540   1              unsigned short writeCount = 0;          
 541   1              unsigned char localbufLength = 0;
 542   1              unsigned char index = 0;
 543   1              int send_total_count = 0;
 544   1              
 545   1              
 546   1              
 547   1              read_start_address  = buf[2] << 8;
 548   1              read_start_address += buf[3];
 549   1              readCount  = buf[4] << 8;
 550   1              readCount += buf[5];
C51 COMPILER V9.60.7.0   MODBUS                                                            11/08/2024 16:16:15 PAGE 10  

 551   1              
 552   1              write_start_address  = buf[6] << 8;
 553   1              write_start_address += buf[7];
 554   1              writeCount  = buf[8] << 8;
 555   1              writeCount += buf[9];
 556   1              
 557   1              writebytes = buf[10];
 558   1               
 559   1              
 560   1              if (readCount < 0x1 || readCount > 0x7D) {
 561   2                      send_bad_msg(buf[0],buf[1],3);   
 562   2                      ret = 1;
 563   2          return ret;         
 564   2              }
 565   1              if (writeCount < 0x1 || writeCount > 0x79) {
 566   2                      send_bad_msg(buf[0],buf[1],3);   
 567   2                      ret = 1;
 568   2          return ret;         
 569   2              }
 570   1              
 571   1              
 572   1              
 573   1              localbufLength = writebytes;
 574   1              for (index = 0; index < localbufLength; index++) {
 575   2          localbuf[index] = buf[11+index];            
 576   2              }
 577   1              
 578   1      
 579   1                      send_modbus_buf_count = 0;
 580   1                send_modbus_buffer[0] = buf[0];   
 581   1                send_modbus_buffer[1] = buf[1];   
 582   1                send_modbus_buffer[2] = readCount;  
 583   1                while (readCount--) {
 584   2                  send_modbus_buffer[3+send_modbus_buf_count] = P0; 
 585   2                        send_modbus_buf_count++;
 586   2                        send_modbus_buffer[3+send_modbus_buf_count] = P0; 
 587   2                        send_modbus_buf_count++;
 588   2           }          
 589   1                send_modbus_buffer[2] = send_modbus_buf_count;        
 590   1                send_total_count = send_modbus_buf_count + 5;   
 591   1                crc = crc16(send_modbus_buffer,send_total_count-2);  
 592   1                send_modbus_buffer[send_total_count-2] = crc; 
 593   1                send_modbus_buffer[send_total_count-1] = crc >> 8;
 594   1                send_buffer(send_modbus_buffer,send_total_count);             
 595   1              
 596   1              
 597   1              return ret;
 598   1      }
 599          
 600          
 601          
 602          
 603          int not_support_function_code(unsigned char address,unsigned char function)
 604          {
 605   1              int ret = 0;    
 606   1              send_bad_msg(address,function,1);
 607   1              
 608   1              
 609   1              return ret;
 610   1      }
 611          
 612          
C51 COMPILER V9.60.7.0   MODBUS                                                            11/08/2024 16:16:15 PAGE 11  

 613          
 614          
 615          int parse_recv_buffer(unsigned char *buf,int len)
 616          {       
 617   1              int ret = 0;
 618   1              unsigned short temp_crc = 0;
 619   1              unsigned short temp_crc2 = 0;
 620   1              
 621   1              if (len < 4)     return 0;         
 622   1              if (buf == NULL) return 0;
 623   1                                                                 
 624   1              if (buf[0] != dev_address && buf[0] != dev_broadcast_address) {  
 625   2                      
 626   2                      ret = 1;
 627   2                      return ret;
 628   2              }
 629   1              temp_crc  = buf[len-1] << 8;
 630   1              temp_crc += buf[len-2];
 631   1              temp_crc2 = crc16(buf,len-2);   
 632   1              
 633   1              if (temp_crc != temp_crc2) { 
 634   2                      
 635   2                      ret = 1;
 636   2                      return ret;
 637   2              }
 638   1              
 639   1              if (buf[0] == 0) {   
 640   2                      return broadcast_process(buf,len);
 641   2                 }
 642   1              
 643   1              
 644   1              switch (buf[1]) {
 645   2                      case FUNCTION_READ_COILS_1                 : ret = function_READ_COILS_1(buf); break;                             
 646   2                      case FUNCTION_READ_DISCREATE_INPUT_2       : ret = function_READ_DISCREATE_INPUT_2(buf); break;       
 647   2                      case FUNCTION_READ_HOLDING_REGISTERS_3     : ret = function_READ_HOLDING_REGISTERS_3(buf); break;     
 648   2                      case FUNCTION_READ_INPUT_REGISTERS_4       : ret = function_READ_INPUT_REGISTERS_4(buf); break;       
 649   2                      case FUNCTION_WRITE_SINGLE_COIL_5          : ret = function_WRITE_SINGLE_COIL_5(buf,len); break;        
             -  
 650   2                      case FUNCTION_WRITE_SINGLE_REGISTER_6      : ret = function_WRITE_SINGLE_REGISTER_6(buf,len); break;    
             -  
 651   2                      case FUNCTION_WRITE_MULTIPLE_COILS_F       : ret = function_WRITE_MULTIPLE_COILS_F(buf); break;       
 652   2                      case FUNCTION_WRITE_MULTIPLE_REGISTERS_10  : ret = function_WRITE_MULTIPLE_REGISTERS_10(buf); break;  
 653   2                      case FUNCTION_READ_WRITE_MULTIPLE_REGISTERS_17  : ret = function_READ_WRITE_MULTIPLE_REGISTERS_17(buf); 
             -break;         
 654   2                      default: ret = not_support_function_code(buf[0],buf[1]);        
 655   2              }       
 656   1              
 657   1              return ret;
 658   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   4458    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    578     126
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =      2    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
